// Mocks generated by Mockito 5.3.2 from annotations
// in hydr_leak_tracker/test/log_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i3;

import 'package:hydr_leak_tracker/data/IDbService.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IdbService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIdbService extends _i1.Mock implements _i2.IdbService {
  MockIdbService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  dynamic init({
    required _i3.File? file,
    bool? hasHeaders,
  }) =>
      super.noSuchMethod(Invocation.method(
        #init,
        [],
        {
          #file: file,
          #hasHeaders: hasHeaders,
        },
      ));
  @override
  _i4.Stream<Map<String, dynamic>> getAllEntries() => (super.noSuchMethod(
        Invocation.method(
          #getAllEntries,
          [],
        ),
        returnValue: _i4.Stream<Map<String, dynamic>>.empty(),
      ) as _i4.Stream<Map<String, dynamic>>);
  @override
  _i4.Future<void> updateEntry({
    required Map<String, dynamic>? entry,
    required String? table,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEntry,
          [],
          {
            #entry: entry,
            #table: table,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> removeEntry({
    required String? id,
    required String? table,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeEntry,
          [],
          {
            #id: id,
            #table: table,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
